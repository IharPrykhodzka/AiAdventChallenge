package ru.aiAdventChallenge

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
 * @param response - –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
 * @param singleLine - –µ—Å–ª–∏ true, –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
 * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
 */
fun formatAgentResponse(response: String, singleLine: Boolean = false): String {
    return if (singleLine) {
        // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        response.trimStart()
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        response.split("\n").joinToString("\n") { line ->
            if (line.isNotBlank()) "    $line" else line
        }
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–∫-–≥—Ä—É–ø–ø–∞—Ö –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
 * @param response - –æ—Ç–≤–µ—Ç –æ—Ç AI —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–∞—Ö
 * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
 */
fun formatRockGroupsResponse(response: RockGroupsResponse): String {
    val result = StringBuilder()
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    result.appendLine("üé∏ –†–æ–∫-–≥—Ä—É–ø–ø—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: \"${response.query}\"")
    result.appendLine("–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: ${response.totalCount}")
    result.appendLine("‚ïê".repeat(60))
    
    if (response.groups.isEmpty()) {
        result.appendLine("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return result.toString()
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
    response.groups.forEachIndexed { index, group ->
        result.appendLine()
        result.appendLine("${index + 1}. üéµ ${group.name} (${group.foundedYear})")
        result.appendLine("   üåç –°—Ç—Ä–∞–Ω–∞: ${group.country}")
        result.appendLine("   üéº –ñ–∞–Ω—Ä: ${group.genre}")
        
        // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–ª—å–±–æ–º—ã
        if (group.famousAlbums.isNotEmpty()) {
            result.appendLine("   üíø –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–ª—å–±–æ–º—ã:")
            group.famousAlbums.forEach { album ->
                result.appendLine("      ‚Ä¢ $album")
            }
        }
        
        // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã
        if (group.members.isNotEmpty()) {
            result.appendLine("   üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:")
            group.members.forEach { member ->
                result.appendLine("      ‚Ä¢ $member")
            }
        }
        
        // –û–ø–∏—Å–∞–Ω–∏–µ
        if (group.description.isNotBlank()) {
            result.appendLine("   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${group.description}")
        }
        
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
        if (index < response.groups.size - 1) {
            result.appendLine("‚îÄ".repeat(40))
        }
    }
    
    result.appendLine()
    result.appendLine("‚ïê".repeat(60))
    
    return result.toString()
}