package ru.aiAdventChallenge

import org.junit.jupiter.api.Test
import org.junit.jupiter.api.Assertions.*
import ru.aiAdventChallenge.models.RockGroup
import ru.aiAdventChallenge.models.RockGroupsResponse

class HelperTest {

    @Test
    fun testFormatRockGroupsResponse() {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        val groups = listOf(
            RockGroup(
                name = "Queen",
                foundedYear = 1970,
                country = "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
                genre = "–†–æ–∫, –≥–ª—ç–º-—Ä–æ–∫",
                famousAlbums = listOf("A Night at the Opera", "Bohemian Rhapsody"),
                members = listOf("Freddie Mercury", "Brian May", "Roger Taylor", "John Deacon"),
                description = "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è —Ä–æ–∫-–≥—Ä—É–ø–ø–∞, –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–≤–æ–∏–º–∏ —ç–ø–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è–º–∏"
            ),
            RockGroup(
                name = "Led Zeppelin",
                foundedYear = 1968,
                country = "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
                genre = "–•–∞—Ä–¥-—Ä–æ–∫, –±–ª—é–∑-—Ä–æ–∫",
                famousAlbums = listOf("Led Zeppelin IV", "Physical Graffiti"),
                members = listOf("Robert Plant", "Jimmy Page", "John Paul Jones", "John Bonham"),
                description = "–û–¥–Ω–∞ –∏–∑ –≤–µ–ª–∏—á–∞–π—à–∏—Ö —Ö–∞—Ä–¥-—Ä–æ–∫ –≥—Ä—É–ø–ø –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω"
            )
        )

        val response = RockGroupsResponse(
            groups = groups,
            totalCount = 2,
            query = "–∑–Ω–∞–º–µ–Ω–∏—Ç—ã–µ —Ä–æ–∫-–≥—Ä—É–ø–ø—ã"
        )

        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        val formattedOutput = formatRockGroupsResponse(response)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º presence –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        assertTrue(formattedOutput.contains("üé∏ –†–æ–∫-–≥—Ä—É–ø–ø—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: \"–∑–Ω–∞–º–µ–Ω–∏—Ç—ã–µ —Ä–æ–∫-–≥—Ä—É–ø–ø—ã\""))
        assertTrue(formattedOutput.contains("–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: 2"))
        assertTrue(formattedOutput.contains("1. üéµ Queen (1970)"))
        assertTrue(formattedOutput.contains("üåç –°—Ç—Ä–∞–Ω–∞: –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è"))
        assertTrue(formattedOutput.contains("üéº –ñ–∞–Ω—Ä: –†–æ–∫, –≥–ª—ç–º-—Ä–æ–∫"))
        assertTrue(formattedOutput.contains("üíø –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–ª—å–±–æ–º—ã:"))
        assertTrue(formattedOutput.contains("‚Ä¢ A Night at the Opera"))
        assertTrue(formattedOutput.contains("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:"))
        assertTrue(formattedOutput.contains("‚Ä¢ Freddie Mercury"))
        assertTrue(formattedOutput.contains("üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è —Ä–æ–∫-–≥—Ä—É–ø–ø–∞, –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–≤–æ–∏–º–∏ —ç–ø–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è–º–∏"))
        assertTrue(formattedOutput.contains("2. üéµ Led Zeppelin (1968)"))
        assertTrue(formattedOutput.contains("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"))

        println("–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –æ —Ä–æ–∫-–≥—Ä—É–ø–ø–∞—Ö:")
        println(formattedOutput)
    }

    @Test
    fun testFormatEmptyRockGroupsResponse() {
        // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø
        val emptyResponse = RockGroupsResponse(
            groups = emptyList(),
            totalCount = 0,
            query = "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã"
        )

        val formattedOutput = formatRockGroupsResponse(emptyResponse)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≥—Ä—É–ø–ø
        assertTrue(formattedOutput.contains("üé∏ –†–æ–∫-–≥—Ä—É–ø–ø—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: \"–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã\""))
        assertTrue(formattedOutput.contains("–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: 0"))
        assertTrue(formattedOutput.contains("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."))

        println("\n–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:")
        println(formattedOutput)
    }
}